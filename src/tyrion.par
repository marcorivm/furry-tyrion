/~
 Definición para el lenguaje Tyrion
~/


/~
 Funciones
~/
[*
// Aqui pueden ir funciones de javascript

// Declarando underscore
var _ = require('underscore');

// Extender underscore para usar la función mergeDictionary
_.mixin({
	mergeDictionary: function (dictionary) {
		var merged = (arguments.length > 0)? arguments[0] : {};
		for (var i = arguments.length - 1; i >= 1; i--) {
			_(arguments[i]).map(function(value, key) {
				if(_(merged).has(key)) {
					// Error variable ya definida;
					IO.printError(1, key);
					return false;
				}
				merged[key] = value;
			});
		};
		return merged;
	}
});
_.mixin({
	addToDictionary: function (dictionary, value) {
		if(_(dictionary).has(value.id)) {
			IO.printError(1, value.id);
			return false;
		}
		if(_(value).has('id')) {
			dictionary[value.id] = value;
		}
		return dictionary;
	}
});

var OP_NUMBER = 1,
	OP_STRING = 2,
	OP_BOOL   = 3,

	OP_ADD = 1,
	OP_SUB = 2,
	OP_MULT = 3,
	OP_DIV = 4,
	OP_GT = 5,
	OP_LT = 6,
	OP_GT_EQ = 7,
	OP_LT_EQ = 8,
	OP_EQ = 9,
	OP_DIFF = 10,
	OP_AND = 11,
	OP_OR = 12;

var tabla_operaciones = {
		'1': {
			'+': {
				'1': '1',
				'2': '2'
			},
			'-': {
				'1': '1'
			},
			'*': {
				'1': '1'
			},
			'/': {
				'1': '1',
				'2': '2'
			},
			'>': {
				'1': '3',
			},
			'<': {
				'1': '3',
			},
			'>=': {
				'1': '3',
			},
			'<=': {
				'1': '3',
			},
			'==': {
				'1': '3',
			},
			'!=': {
				'1': '3',
			},
		},
		'2': {
			'+': {
				'1': '2',
				'2': '2'
			},
			'>': {
				'2': '3',
			},
			'<': {
				'2': '3',
			},
			'>=': {
				'2': '3',
			},
			'<=': {
				'2': '3',
			},
			'==': {
				'2': '3',
			},
			'!=': {
				'2': '3',
			}
		},
		'3': {
			'==': {
				'3': '3',
			},
			'!=': {
				'3': '3',
			},
			'&&': {
				'3': '3',
			},
			'||': {
				'3': '3',
			}
		}
};
var checkOperation = function (op_1, operation, op_2) {
	return (
			_(tabla_operaciones).has(op_1)
			&& _(tabla_operaciones[op_1]).has(operation)
			&& _(tabla_operaciones[op_1][operation]).has(op_2)
		)?
			tabla_operaciones[op_1][operation][op_2]
			: -1
	;
};
var VARIABLE = function (id, type) {
	return {
		id: id,
		type: type
	};
};
var NODE = function(id) {
	var node = {
		id: id,
		variables: {},
		nodes: {},
		quads: [],
		parent: undefined,
		addVariable: function(variable) {
			if(_(this.variables).has(variable.id)) {
				// Error! variable ya declarada!
				IO.printError(1, variable.id);
				return false;
			}
			this.variables[variable.id] = variable;
			return true;
		},
		addNode: function(node) {
			if(_(this.nodes).has(node.id)) {
				// Error! función ya declarada!
				IO.printError(2, node.id);
				return false;
			}
			node.parent = this;
			this.nodes[node.id] = node;
			return node;
		},
		addQuad: function() {

		},
		checkQuad: function(quad_op) {
			switch(quad_op) {
				case "ExpSum":
					if (_([OP_ADD, OP_SUB, OP_OR]).indexOf(pila_operadores.first, true) >= 0) {
						// Crear quad de suma
						this.addQuad();
					};
				break;

				default:
				;
			}
		},
		callFunction: function(function_id) {
			if(this.nodeExists(function_id)) {
				IO.printError(4);
			};
		},
		hasVariable: function(variable) {
			return _(this.variables).has(variable);
		},
		nodeExists: function(node) {
			return _(this.nodes).has(node.id) || (this.parent? this.parent.nodeExists(node) : false);
		},
		useVariable: function(variable_id, override) {
			if(!override && this.variableExists(variable_id)) {
				IO.printError(3);
				return false;
			}
			return _(this.variables).has(variable_id)? this.variables[variable_id] : this.parent.useVariable(variable_id, true);
		},
		variableExists: function(variable) {
			return _(this.variables).has(variable.id) || (this.parent? this.parent.variableExists(variable) : false);
		},
	};

	return node;
};

var IO = {
	print: function (to_print) {
		return console.log(to_print);
	},
	printError: function(error_number) {
		switch(error_number) {
			case 1:
				this.print("Error variable " + arguments[1] + " ya declarada");
			break;
			case 2:
				this.print("Error función " + arguments[1] + " ya declarada");
			break;
			case 3:
				this.print("Error la variable "+ error_number + " no se encuentra declarada");
			break;
			case 4:
				this.print("Error la variable "+ error_number + " no se encuentra declarada");
			default:
				this.print("Error " + error_number);
		}
	}
};

// Preparation code
var root;
var current_node;
var PILA = function() {
	return _([]);
	return {
		pila: [],
		push: fucntion(val) {
			this.pila.push(val);
		},
		pop: function() {
			return this.pila.pop();
		},
		shift: function() {
			return this.pila.shift();
		},
		unshift: function() {
			return this.pila.unshift();
		}
	};
}
var pila_operandos = new PILA();
var pila_operadores = new PILA();
*]
/~
 Tokens
~/

/~
 Ignorar espacios en blanco y comentarios
~/
!	' |\t|\r|\n|//[^\n]*\n'

/~
 Tokens, no hay distinción entre mayusculas y minúsculas
~/
	"SI"
	"SINO"
	"HACER"
	"MIENTRAS"
	"REPETIR"
	"PORCADA"
	"EN"
	"FUNCION INICIO"		FINICIO
	"FUNCION"
	"RESPONDER"
	"PREGUNTAR"
	"DECIR"
	"ESCUCHAR"
	"NUMERO"				TNUMERO
	"LETRAS"				TLETRAS
	"LOGICO"				TLOGICO
	"MATRIZ"				TMATRIZ
	"RAIZ"
	"PI"
	"E"
	'{'
	'}'
	'\['
	'\]'
	';'
	','
	'='
	'!'
	'==|!=|<>|<=|>=|>|<'	OP_REL
	'\+'
	'\-'
	'/'
	'\*'
	'%'
	'\^'
	'\('
	'\)'
	'\|\|'
	'\&\&'

	"VERDADERO | FALSO" 	LOGICO
	'[a-z][a-zA-Z0-9_]*'	IDENTIFICADOR
	'\'([^\']|\'\')*\''		LETRAS								[* %match = %match.substr( 1, %match.length - 2 );
																   %match = %match.replace( /''/g, "\'" );		*]
	'([0-9]*\.)?[0-9]+'		NUMERO								[* $match = parseFloat(%match); *]
	;

##
Program:
		ProgramInit VarDecs FunctionDecs Inicio
		;
ProgramInit:													[* root = new NODE('global'); current_node = root; *];
Inicio: InicioInit '(' ')' Bloque
		;
InicioInit:
		FINICIO													[* current_node = current_node.addNode(new NODE('inicio')); *]
		;

Var:	VarDec '=' Exp ';'
		| VarDec ';'
		;
VarDec: Tipo IDENTIFICADOR										[* current_node.addVariable(new VARIABLE(%2, %1)); *]
		;
VarDecs:
		VarDecs Var
		|
		;
ParamOpt:
		Param
		|
		;
Param:	Param ',' VarDec
		| VarDec
		;
ArgsOpt:
		Args
		|
		;
Args:	Args ',' Exp
		| Exp
		;

Function:
		FunctionInit '(' ParamOpt ')' Bloque
		;
FunctionInit:
		FUNCION Tipo IDENTIFICADOR								[* current_node = current_node.addNode(new NODE(%3)); *]
		| FUNCION IDENTIFICADOR									[* current_node = current_node.addNode(new NODE(%2)); *]
		;

FunctionDecs:
		FunctionDecs Function 									[* current_node = current_node.parent; *]
		|
		;

Bloque:
		'{' Statements '}' 										[* %% = %2; *]
		;

Statements:
		Statements Var
		| Statements Statement
		|
		;
Statement:
		Control
		| Asignacion
		| Regreso
		| FunctionCall ';'
		| SpecialFunctions
		| ';'
		;
Asignacion:
		IDENTIFICADOR '=' Exp ';' 								[* current_node.useVariable(%1); *]
		;
Regreso:
		RESPONDER Exp ';'
		;
FunctionCall:
		IDENTIFICADOR '(' ArgsOpt ')' 							[* current_node.callFunction(%1); *]
		;
SpecialFunctions:
		DECIR '(' Exp ')' ';'
		;
Read:	ESCUCHAR '(' ')'
		| PREGUNTAR '(' Exp ')'
		;


Control:
		If
		| While
		| Foreach
		| Dowhile
		;
If:		SI '(' Exp ')' Bloque
		| SI '(' Exp ')' Bloque SINO Bloque
		| SI '(' Exp ')' Bloque SINO If
		;
While:	MIENTRAS '(' Exp ')' REPETIR Bloque
		;
Foreach:
		ForeachInit Bloque
		;
ForeachInit:
		PORCADA IDENTIFICADOR EN IDENTIFICADOR 					[* current_node.useVariable(%4); current_node = current_node.addNode(new NODE(_.uniqueId('_foreach_'))); current_node.addVariable(%2); *]
		;
Dowhile:
		HACER Bloque MIENTRAS '(' Exp ')' ';'
		;

Tipo: 	TLETRAS
		| TNUMERO
		| TLOGICO
		| TMATRIZ
		;
Matriz:	Matriz '[' Exp ']'
		| IDENTIFICADOR '[' Exp ']' 							[* pila_operandos.push(current_node.useVariable(%1)); *]
		;

Exp:	Exp OP_REL ExpSum
		| ExpSum
		;
ExpSum:	ExpSum '+' ExpMult 										[* pila_operadores.push(OP_ADD); *]
		| ExpSum '-' ExpMult 									[* pila_operadores.push(OP_SUB); *]
		| ExpSum '||' ExpMult 									[* pila_operadores.push(OP_OR); *]
		| ExpMult 												[* current_node.checkQuad('ExpSum'); *]
		;
ExpMult:
		ExpMult '*' ExpVal 										[* pila_operadores.push(OP_MULT); *]
		| ExpMult '/' ExpVal 									[* pila_operadores.push(OP_DIV); *]
		| ExpMult '&&' ExpVal 									[* pila_operadores.push(OP_AND); *]
		| ExpVal 												[* current_node.checkQuad('ExpMult'); *]
		;
ExpVal:	IDENTIFICADOR 											[* pila_operandos.push(current_node.useVariable(%1)); *]
		| NUMERO
		| LETRAS
		| LOGICO
		| Matriz
		| Read
		| PI
		| E
		| '(' Exp ')'
		| FunctionCall
		;

[*
if(process.argv.length > 2) {
	var file = process.argv[2];
	var fs = require('fs');
	fs.readFile(file, 'UTF-8', function(err, data) {
		if(err) {
			console.log("No se encontró el archivo!");
			return console.log(err);
		}
		var str = data;
		var error_cnt = 0;
		var error_off = new Array();
		var error_la = new Array();
		if((error_cnt = __##PREFIX##parse(str, error_off, error_la)) > 0) {
			for(var i = 0; i < error_cnt; i++ ) {
				IO.print( "Parse error near >" + str.substr( error_off[i], 30 ) + "<, expecting \"" + error_la[i].join() + "\"" );
			}
		} else {
			IO.print("Programa correcto!");
		}
	});
}
else {
	IO.print( 'usage: tyrion <filename>' );
}
*]
