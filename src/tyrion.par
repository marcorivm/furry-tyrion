/~
 Definición para el lenguaje Tyrion
~/


/~
 Funciones
~/
[*
// Aqui pueden ir funciones de javascript

// Declarando underscore
var _ = require('underscore');

// Extender prototype de String para usar startsWith
if (typeof String.prototype.startsWith != 'function') {
  String.prototype.startsWith = function (str){
	return this.slice(0, str.length) == str;
  };
}
if(typeof Array.prototype.clean != 'function') {
	Array.prototype.clean = function(deleteValue) {
	  for (var i = 0; i < this.length; i++) {
		if (this[i] == deleteValue) {
		  this.splice(i, 1);
		  i--;
		}
	  }
	  return this;
	};
}

// Extender underscore para usar la función mergeDictionary
_.mixin({
	mergeDictionary: function (dictionary) {
		var merged = (arguments.length > 0)? arguments[0] : {};
		for (var i = arguments.length - 1; i >= 1; i--) {
			_(arguments[i]).map(function(value, key) {
				if(_(merged).has(key)) {
					// Error variable ya definida;
					IO.printError(1, key);
					return false;
				}
				merged[key] = value;
			});
		};
		return merged;
	}
});
_.mixin({
	addToDictionary: function (dictionary, value) {
		if(_(dictionary).has(value.id)) {
			IO.printError(1, value.id);
			return false;
		}
		if(_(value).has('id')) {
			dictionary[value.id] = value;
		}
		return dictionary;
	}
});
var	OP_NUMBER = 1,
	OP_STRING = 2,
	OP_BOOL   = 3,

	OP_ADD    = 1,	// +
	OP_SUB    = 2,	// -
	OP_MULT   = 3,	// *
	OP_DIV    = 4,	// /
	OP_GT     = 5,	// >
	OP_GT_EQ  = 6,	// >=
	OP_LT     = 7,	// <
	OP_LT_EQ  = 8,	// <=
	OP_EQ     = 9,	// ==
	OP_DIFF   = 10,	// !=
	OP_AND    = 11,	// &
	OP_OR     = 12,	// |
	OP_ASSIGN = 13,	// =
	OP_ASK    = 14,	// preguntar
	OP_SPEAK  = 15,	// hablar
	OP_LISTEN = 16,	// escuchar
	OP_GOTO   = 17,	// goto
	OP_GOTOF  = 18,	// gotof
	OP_GOTOT  = 19,	//  gotov
	OP_ERA    = 20,	// era
	OP_GOSUB  = 21,	// gosub
	OP_PARAM  = 22,	// param
	OP_RETURN = 23,	// return

	Left_Par  = 24,
	Right_Par = 25
;

var tabla_operaciones = {
		1: {
			1: {
				1: 1,
				2: 2
			},
			2: {
				1: 1,
			},
			3: {
				1: 1,
			},
			4: {
				1: 1,
				2: 2,
			},
			5: {
				1: 3,
			},
			6: {
				1: 3,
			},
			7: {
				1: 3,
			},
			8: {
				1: 3,
			},
			9: {
				1: 3,
			},
			10: {
				1: 3,
			},
			13: {
				1: 1,
			}
		},
		2: {
			1: {
				1: 2,
				2: 2,
			},
			5: {
				2: 3,
			},
			6: {
				2: 3,
			},
			7: {
				2: 3,
			},
			8: {
				2: 3,
			},
			9: {
				2: 3,
			},
			10: {
				2: 3,
			},
			13: {
				1: 2,
				2: 2,
			}
		},
		3: {
			9: {
				3: 3,
			},
			10: {
				3: 3,
			},
			11: {
				3: 3,
			},
			12: {
				3: 3,
			},
			13: {
				3: 3,
			}
		}
};
var checkOperation = function (op_1, operation, op_2) {
	return (
			_(tabla_operaciones).has(op_1)
			&& _(tabla_operaciones[op_1]).has(operation)
			&& _(tabla_operaciones[op_1][operation]).has(op_2)
		)?
			tabla_operaciones[op_1][operation][op_2]
			: -1;
};
var VARIABLE = function (id, type, value) {
	if(type == 1) {
		value = parseFloat(value);
	}
	var x = {
		id: id,
		type: type,
		value: value,
		parent: undefined,
		_namespace: undefined,
		namesapce: function() {
			this._namespace = this._namespace? this._namespace : (this.parent? (this.parent.namesapce() + '_' + this.id) : this.id);
			return this._namespace;
		},
		_direction: undefined,
		direction: function() {
			this._direction = this._direction? this._direction : FURRY.addVariable(this.namesapce());
			return this._direction;
		}
	};
	if(id.startsWith('_const_')) {
		x._direction = [4, value];
	}
	return x;
};
var NODE = function(id, type) {
	var node = {
		id: id,
		type: (type? type : 0),
		args: [],
		parameters: [],
		variables: {},
		nodes: {},
		quads_start: undefined,
		parent: undefined,
		_namespace: undefined,
		direction: FURRY.quads.length,
		namesapce: function() {
			this._namespace = this._namespace? this._namespace : (this.parent? (this.parent.namesapce() + '_' + this.id) : this.id);
			return this._namespace;
		},
		addVariable: function(variable) {
			if(_(this.variables).has(variable.id)) {
				// Error! variable ya declarada!
				IO.printError(1, variable.id);
				return false;
			}
			variable.parent = this;
			this.variables[variable.id] = variable;
			return variable;
		},
		addNode: function(node) {
			if(_(this.nodes).has(node.id)) {
				// Error! función ya declarada!
				IO.printError(2, node.id);
				return false;
			}
			node.parent = this;
			this.nodes[node.id] = node;
			return node;
		},
		addParameter: function(parameter) {
			parameter = this.addVariable(parameter);
			this.parameters.push(parameter);
			return parameter;
		},
		addQuad: function(op_id, op_1, op_2, result) {
			return FURRY.quads.push([op_id, op_1, op_2, result].clean()) - 1;
		},
		checkQuad: function(quad_op) {
			switch(quad_op) {
				case "GotoInicio":
					this.addQuad(OP_ERA);
					pila_saltos.push(this.addQuad(OP_GOSUB));
					break;
				case "Inicio":
					var inicio = pila_saltos.pop();
					FURRY.quads[inicio][1] = this.direction;
					break;
				case "ExpSum":
					var operador = pila_operadores.first();
					if( operador == 1 || operador == 2 || operador == 12 ) {
						this.normalQuad();
					}
					break;
				case "ExpMult":
					var operador = pila_operadores.first();
					if( operador == 3 || operador == 4 || operador == 11 ) {
						this.normalQuad();
					}
					break;
				case "ExpRel":
					this.normalQuad();
				break;
				case "ExpAssign":
					var op_2 = pila_operandos.pop();
					var op_1 = pila_operandos.pop();
					var operador = pila_operadores.pop();
					if(op_2.type == op_1.type) {
						this.addQuad(operador, op_2.direction(), op_1.direction());
					} else {
						IO.printError(5, [op_1, operador, op_2]);
					}
					break;
				case "FunCall":
					var op_2 = pila_operandos.pop();
					var op_1 = pila_operandos.pop();
					if(op_2.length != op_1.parameters.length ||
						! _(op_2).reduce(function(memo, value, key) {
							return memo && (value.type == this[key].type);
						},true, op_1.parameters)) {
						IO.printError(5, op_2);
					}
					this.addQuad(OP_ERA);
					_(op_1.parameters).map(function(value, key) {
						this.addQuad(OP_PARAM, value.direction());
					}, this);
					var ret = new VARIABLE(_.uniqueId('_tmp_'), op_1.type);
					this.addQuad(OP_GOSUB, op_1.direction, ret.direction());
					// TODO: Agregar gotosub.
					return ret;
					break;
				case "Ask":
					var ask = true;
				case "Speak":
					var op_2 = pila_operandos.pop();
					var operador = pila_operadores.pop();
					if(op_2.type != 2 && op_2.type != 1 && op_2.type != 3) {
						IO.printError(5, [op_2, operador]);
						break;
					}
					this.addQuad(operador, op_2.direction());
					if(_.isUndefined(ask)) {
						break;
					}
				case "Listen":
					var op_1 = pila_operandos.first();
					var operador = pila_operadores.pop();
					var tmp = new VARIABLE(_.uniqueId('_tmp_'), op_1.type);
					this.addQuad(operador, tmp.direction(), tmp.type);
					pila_operandos.push(tmp);
					break;
				case "If":
					var op_1 = pila_operandos.pop();
					if(op_1.type != 3) {
						IO.printError(5, [op_1]);
						break;
					}
					pila_saltos.push(this.addQuad(OP_GOTOF, op_1.direction()));
					break;
				case "Else":
					var falso = pila_saltos.pop();
					pila_saltos.push(this.addQuad(OP_GOTO));
					FURRY.quads[falso][2] = pila_saltos.first() + 1;
					break;
				case "While":
					var op_1 = pila_operandos.pop();
					if(op_1.type != 3) {
						IO.printError(5, [op_1]);
						break;
					}
					pila_saltos.push(this.addQuad(OP_GOTOF, op_1.direction()));
					break;
				case "DoWhile":
					pila_saltos.push(FURRY.quads.length);
					break;
				case "EndDoWhile":
					var inicio = pila_saltos.pop();
					var op_1 = pila_operandos.pop();
					this.addQuad(OP_GOTOT, op_1.direction(), inicio);
					break;
				case "EndElse":
					var fin = pila_saltos.pop();
					FURRY.quads[fin][1] = FURRY.quads.length;
					break;
				case "EndIf":
					var fin = pila_saltos.pop();
					FURRY.quads[fin][2] = FURRY.quads.length;
					break;
				case "EndWhile":
					var falso = pila_saltos.pop();
					var retorno = pila_saltos.pop();
					this.addQuad(OP_GOTO, retorno);
					FURRY.quads[falso][2] = FURRY.quads.length;
					break;
				case "Return":
					var op_2 = pila_operandos.pop();
					this.addQuad(OP_RETURN, op_2.direction());
					break;
				default:
				;
			}
		},
		callFunction: function(function_id, override) {
			if(override || this.nodeExists(function_id)) {
				return _(this.nodes).has(function_id)? this.nodes[function_id] : this.parent.callFunction(function_id, true);
			}
			IO.printError(4, function_id);
			return false;
		},
		hasVariable: function(variable) {
			return _(this.variables).has(variable);
		},
		nodeExists: function(node) {
			return _(this.nodes).has(node) || (this.parent? this.parent.nodeExists(node) : false);
		},
		normalQuad: function() {
			// Crear quad de suma
			var op_2 = pila_operandos.pop();
			var op_1 = pila_operandos.pop();
			var operador = pila_operadores.pop();
			var tmp = new VARIABLE(_.uniqueId('_tmp_'), checkOperation(op_1.type, operador, op_2.type));
			if(tmp.type == -1) {
				IO.printError(5, [op_1, operador, op_2]);
			} else {
				this.addQuad(operador, op_1.direction(), op_2.direction(), tmp.direction());
				pila_operandos.push(tmp);
			}
		},
		useVariable: function(variable_id, override) {
			if(override || this.variableExists(variable_id)) {
				return _(this.variables).has(variable_id)? this.variables[variable_id] : this.parent.useVariable(variable_id, true);
			}
			IO.printError(3, variable_id);
			return false;
		},
		variableExists: function(variable) {
			return _(this.variables).has(variable) || (this.parent? this.parent.variableExists(variable) : false);
		},
	};

	return node;
};

var IO = {
	print: function (to_print) {
		return console.log(to_print);
	},
	printError: function(error_number) {
		switch(error_number) {
			case 1:
				this.print("Error variable " + arguments[1] + " ya declarada");
			break;
			case 2:
				this.print("Error función " + arguments[1] + " ya declarada");
			break;
			case 3:
				this.print("Error la variable "+ arguments[1] + " no se encuentra declarada");
			break;
			case 4:
				this.print("Error la función "+ arguments[1]  + " no se encuentra declarada");
			break
			case 5:
				this.print("Error, tipos incompatibles - ")
				this.print(arguments[1]);
			break;
			default:
				this.print("Error " + error_number);
		}
	}
};

// Preparation code
var FURRY = {
	addVariable: _.memoize(function(variable) {
		 if(variable.startsWith("_const_")) {
			return [4, this.variables.const.push(0)];
		 } else if (variable.startsWith("_tmp_") || true) {
			return [0, this.variables.global.push(0)];
		 }
	}),
	variables: {
		global: [],
		local: [],
		local: [],
		temp: [],
		const: []
	},
	quads: []
};
var root;
var current_node;
var PILA = function() {
	return {
		pila: [],
		push: function(val) {
			this.pila.push(val);
		},
		pop: function() {
			return this.pila.pop();
		},
		shift: function() {
			return this.pila.shift();
		},
		unshift: function() {
			return this.pila.unshift();
		},
		first: function() {
			return this.pila[this.pila.length-1];
		},
		value: function() {
			return this.pila;
		}
	};
}
var pila_operandos = new PILA();
var pila_operadores = new PILA();
var pila_saltos = new PILA();
*]
/~
 Tokens
~/

/~
 Ignorar espacios en blanco y comentarios
~/
!	' |\t|\r|\n|//[^\n]*\n'

/~
 Tokens, no hay distinción entre mayusculas y minúsculas
~/
	"SI"
	"SINO"
	"HACER"
	"MIENTRAS"
	"REPETIR"
	"PORCADA"
	"EN"
	"FUNCION INICIO"		FINICIO
	"FUNCION"
	"RESPONDER"
	"PREGUNTAR"
	"DECIR"
	"ESCUCHAR"
	"NUMERO"				TNUMERO
	"LETRAS"				TLETRAS
	"LOGICO"				TLOGICO
	"MATRIZ"				TMATRIZ
	"RAIZ"
	"PI"
	"E"
	'{'
	'}'
	'\['
	'\]'
	';'
	','
	'='
	'!'
	'=='
	'!='
	'<>'
	'<='
	'>='
	'>'
	'<'
	'\+'
	'\-'
	'/'
	'\*'
	'%'
	'\^'
	'\('
	'\)'
	'\|\|'
	'\&\&'

	"VERDADERO|FALSO" 	 	LOGICO 								[* %match = %match.toLowerCase() == "verdadero"; *]
	'[a-z][a-zA-Z0-9_]*'	IDENTIFICADOR
	'\'([^\']|\'\')*\''		LETRAS								[* %match = %match.substr( 1, %match.length - 2 );
																   %match = %match.replace( /''/g, "\'" );		*]
	'([0-9]*\.)?[0-9]+'		NUMERO								[* $match = parseFloat(%match); *]
	;

##
Program:
		ProgramInit VarDecs GotoInicio FunctionDecs Inicio 		[* /* EMPTY */ *]
		;
ProgramInit:													[* root = new NODE('global'); current_node = root; *]
		;
GotoInicio: 													[* current_node.checkQuad('GotoInicio'); *]
		;
Inicio: InicioInit '(' ')' Bloque 								[* /* EMPTY */ *]
		;
InicioInit:
		FINICIO													[* current_node = current_node.addNode(new NODE('inicio')); current_node.checkQuad('Inicio') *]
		;

Var:	VarDecInit Exp ';' 										[* current_node.checkQuad('ExpAssign'); *]
		| VarDec ';' 											[* /* EMPTY */ *]
		;
VarDecInit:
		VarDec '=' 												[* pila_operandos.push(%1); pila_operadores.push(OP_ASSIGN); *]
		;
VarDec: Tipo IDENTIFICADOR										[* %% = current_node.addVariable(new VARIABLE(%2, %1)); *]
		;
VarDecs:
		VarDecs Var 											[* /* EMPTY */ *]
		| 														[* /* EMPTY */ *]
		;
ParamOpt:
		Param 													[* /* EMPTY */ *]
		| 														[* /* EMPTY */ *]
		;
Param:	Param ',' VarDec 										[* current_node.addParameter(%3); *]
		| VarDec 												[* current_node.addParameter(%1); *]
		;
ArgsOpt:
		Args 													[* %% = %1; *]
		| 														[* %% = []; *]
		;
Args:	Args ',' Exp 											[* %% = %1.push(%3); *]
		| Exp 													[* %% = [%1]; *]
		;

Function:
		FunctionInit '(' ParamOpt ')' Bloque 					[* /* EMPTY */ *]
		;
FunctionInit:
		FUNCION Tipo IDENTIFICADOR								[* current_node = current_node.addNode(new NODE(%3, %2)); *]
		| FUNCION IDENTIFICADOR									[* current_node = current_node.addNode(new NODE(%2)); *]
		;

FunctionDecs:
		FunctionDecs Function 									[* current_node = current_node.parent; *]
		|  														[* /* EMPTY */ *]
		;

Bloque:
		'{' Statements '}' 										[* %% = %2; *]
		;

Statements:
		Statements Statement 									[* /* EMPTY */ *]
		|
		;
Statement:
		Var 													[* /* EMPTY */ *]
		| Control 												[* current_node = current_node.parent; *]
		| Asignacion 											[* /* EMPTY */ *]
		| Regreso 												[* /* TODO  */ *]
		| FunctionCall ';' 										[* /* EMPTY */ *]
		| SpecialFunctions 										[* /* EMPTY */ *]
		| ';' 													[* /* EMPTY */ *]
		;
Asignacion:
		AsigancionInit Exp ';' 									[* current_node.checkQuad('ExpAssign'); *]
		;
AsigancionInit:
		IDENTIFICADOR '=' 										[* pila_operandos.push(current_node.useVariable(%1)); pila_operadores.push(OP_ASSIGN); *]
		;
Regreso:
		RESPONDER Exp ';' 										[* current_node.checkQuad('Return'); *]
		;
FunctionCall:
		IDENTIFICADOR '(' ArgsOpt ')' 							[*
																	pila_operandos.push(current_node.callFunction(%1));
																	pila_operandos.push(%3);
																	%% = current_node.checkQuad('FunCall');
																*]
		;
SpecialFunctions:
		DECIR '(' Exp ')' ';' 									[* pila_operadores.push(OP_SPEAK); current_node.checkQuad('Speak');  *]
		;
Read:	ESCUCHAR '(' ')' 										[* pila_operadores.push(OP_LISTEN); current_node.checkQuad('Listen'); *]
		| _Read '(' Exp ')' 									[* pila_operadores.push(OP_SPEAK); current_node.checkQuad('Ask');  *]
		;
_Read: 	PREGUNTAR 												[* pila_operadores.push(OP_LISTEN); *]
		;


Control:
		If 														[* /* EMPTY */ *]
		| While 												[* /* EMPTY */ *]
		| Foreach 												[* /* TODO  */ *]
		| DoWhile 												[* /* EMPTY */ *]
		;
If:		IfInit Bloque 											[* current_node.checkQuad("EndIf"); current_node = current_node.parent;  *]
		| IfInit Bloque SinoInit Bloque 						[* current_node.checkQuad("EndElse"); current_node = current_node.parent;  *]
		| IfInit Bloque SinoInit If 							[* current_node.checkQuad("EndElse"); current_node = current_node.parent;  *]
		;
IfInit: SI '(' Exp ')' 											[*
																	current_node = current_node.addNode(new NODE(_.uniqueId('_if_')));
																	current_node.checkQuad('If');
																*]
		;
SinoInit:
		SINO  													[* current_node = current_node.addNode(new NODE(_.uniqueId('_else_'))); current_node.checkQuad('Else'); *]
		;
While:	WhileInit '(' Exp ')' RepetirInit Bloque		 		[* current_node.checkQuad('EndWhile'); *]
		;
WhileInit:
		MIENTRAS  												[* current_node = current_node.addNode(new NODE(_.uniqueId('_while_'))); pila_saltos.push(FURRY.quads.length); *]
		;
RepetirInit:
		REPETIR 												[* current_node.checkQuad('While'); *]
		;
Foreach:
		ForeachInit Bloque 										[* /* TODO */ *]
		;
ForeachInit:
		PORCADA IDENTIFICADOR EN IDENTIFICADOR 					[* current_node.useVariable(%4); current_node = current_node.addNode(new NODE(_.uniqueId('_foreach_'))); current_node.addVariable(%2); *]
		;
DoWhile:
		DoWhileInit Bloque MIENTRAS '(' Exp ')' ';' 			[* current_node.checkQuad("EndDoWhile"); current_node = current_node.parent; *]
		;
DoWhileInit:
		HACER 													[* current_node = current_node.addNode(new NODE(_.uniqueId('_dowhile_'))); current_node.checkQuad("DoWhile"); *]
		;

Tipo: 	TLETRAS 												[* %% = OP_STRING; *]
		| TNUMERO 												[* %% = OP_NUMBER; *]
		| TLOGICO 												[* %% = OP_BOOL; *]
		| TMATRIZ 												[* %% = OP_ARRAY; *]
		;
Matriz:	Matriz '[' Exp ']'
		| IDENTIFICADOR '[' Exp ']' 							[* pila_operandos.push(current_node.useVariable(%1)); *]
		;

Exp:	ExpSum OpRel Exp 										[* current_node.checkQuad('ExpRel'); *]
		| ExpSum
		;
ExpSum:	ExpMult _ExpSum ExpSum									[* ; *]
		| ExpMult 												[* current_node.checkQuad('ExpSum'); *]
		;
_ExpSum: '+'													[* current_node.checkQuad('ExpSum'); pila_operadores.push(OP_ADD); *]
		| '-'													[* current_node.checkQuad('ExpSum'); pila_operadores.push(OP_SUB); *]
		| '||'													[* current_node.checkQuad('ExpSum'); pila_operadores.push(OP_OR); *]
		;
ExpMult:
		ExpVal _ExpMult ExpMult 		 						[* ; *]
		| ExpVal 												[* current_node.checkQuad('ExpMult'); *]
		;
_ExpMult: '*'													[* current_node.checkQuad('ExpMult'); pila_operadores.push(OP_MULT); *]
		| '/'									 				[* current_node.checkQuad('ExpMult'); pila_operadores.push(OP_DIV); *]
		| '&&'									 				[* current_node.checkQuad('ExpMult'); pila_operadores.push(OP_AND); *]
		;
ExpVal:	IDENTIFICADOR 											[* pila_operandos.push(current_node.useVariable(%1)); *]
		| NUMERO 												[* pila_operandos.push(current_node.addVariable(new VARIABLE(_.uniqueId('_const_'), OP_NUMBER, %1)));*]
		| LETRAS 												[* pila_operandos.push(current_node.addVariable(new VARIABLE(_.uniqueId('_const_'), OP_STRING, %1)));*]
		| LOGICO 												[* pila_operandos.push(current_node.addVariable(new VARIABLE(_.uniqueId('_const_'), OP_BOOL, %1)));*]
		| Matriz 												[* /* TODO  */ *]
		| Read 													[* /* EMPTY */ *]
		| PI 	 												[* pila_operandos.push(current_node.addVariable(new VARIABLE(_.uniqueId('_const_'), OP_NUMBER, Math.PI))); *]
		| E 	 												[* pila_operandos.push(current_node.addVariable(new VARIABLE(_.uniqueId('_const_'), OP_NUMBER, Math.E))); *]
		| LeftPar Exp RightPar 									[* /* EMPTY */ *]
		| FunctionCall 											[* pila_operandos.push(%1); *]
		;
LeftPar:
		'(' 													[* pila_operadores.push(Left_Par); *]
		;
RightPar:
		')' 													[* pila_operadores.pop(); *]
		;
OpRel: 	'==' 													[* pila_operadores.push(OP_EQ); *]
		| '!=' 													[* pila_operadores.push(OP_DIFF); *]
		| '<>' 													[* pila_operadores.push(OP_DIFF); *]
		| '<=' 													[* pila_operadores.push(OP_LT_EQ); *]
		| '>=' 													[* pila_operadores.push(OP_GT_EQ); *]
		| '>' 													[* pila_operadores.push(OP_GT); *]
		| '<'													[* pila_operadores.push(OP_LT); *]
		;

[*
if(process.argv.length > 2) {
	var file = process.argv[2];
	var fs = require('fs');
	fs.readFile(file, 'UTF-8', function(err, data) {
		if(err) {
			console.log("No se encontró el archivo!");
			return console.log(err);
		}
		var str = data;
		var error_cnt = 0;
		var error_off = new Array();
		var error_la = new Array();
		if((error_cnt = __##PREFIX##parse(str, error_off, error_la)) > 0) {
			for(var i = 0; i < error_cnt; i++ ) {
				IO.print( "Parse error near >" + str.substr( error_off[i], 30 ) + "<, expecting \"" + error_la[i].join() + "\"" );
			}
		} else {
			//IO.print("Programa correcto!");
			var quads = JSON.stringify(FURRY.quads);
			console.log(quads);
			file = file.split('/');
			file = file[file.length - 1];
			file = file.replace('.ty', '.qds');
			fs.writeFile(file, quads  , function (err) {
			  if (err) throw err;
			  // console.log('It\'s saved!');
			});
		}
	});
}
else {
	IO.print( 'usage: tyrion <filename>' );
}
*]
