/~
 Definición para el lenguaje Tyrion
~/


/~
 Funciones
~/
[*
// Aqui pueden ir funciones de javascript

// Declarando underscore
var _ = require('underscore');

var OP_NUMBER = 1,
	OP_STRING = 2;

var VARIABLE = function (id, type) {
	return {
		id: id,
		type: type
	};
};
var NODE = function(id, parent) {
	return {
		id: undefined,
		variables: {},
		nodes: {},
		parent: parent,
		addVariable: function(variable) {
			if(_(this.variables).has(variable.id)) {
				// Error! variable ya declarada!
				console.log('Error! La variable ' + variable.id + ' ya se encontraba declarada.');
				return false;
			}
			this.variables[variable.id] = variable;
			return true;
		},
		addNode: function(node) {
			if(_(this.nodes).has(node.id)) {
				// Error! función ya declarada!
				console.log('Error! La función ' + node.id + ' ya se encontraba declarada');
				return false;
			}
			this.children[node.id] = node;
			return true;
		},
		hasVariable: function(variable) {
			return _(this.variables).has(variable);
		},
		variableExists: function(variable) {
			return _(this.variables).has(variable.id) || (this.parent? this.parent.variableExists(variable) : false);
		},
		nodeExists: function(node) {
			return _(this.nodes).has(node.id) || (this.parent? this.parent.nodeExists(node) : false);
		}
	};
};
var my_node = new NODE('global', undefined);
*]
/~
 Tokens
~/

/~
 Ignorar espacios en blanco y comentarios
~/
!	' |\t|\r|\n|//[^\n]*\n'

/~
 Tokens, no hay distinción entre mayusculas y minúsculas
~/
	"SI"
	"SINO"
	"HACER"
	"MIENTRAS"
	"REPETIR"
	"PORCADA"
	"EN"
	"FUNCION INICIO"		FINICIO
	"FUNCION"
	"RESPONDER"
	"PREGUNTAR"
	"DECIR"
	"ESCUCHAR"
	"NUMERO"				TNUMERO
	"LETRAS"				TLETRAS
	"LOGICO"				TLOGICO
	"MATRIZ"				TMATRIZ
	"RAIZ"
	"PI"
	"E"
	'{'
	'}'
	'\['
	'\]'
	';'
	','
	'='
	'!'
	'==|!=|<>|<=|>=|>|<'	OP_REL
	'\+'
	'\-'
	'/'
	'\*'
	'%'
	'\^'
	'\('
	'\)'
	'\|\|'
	'\&\&'

	"VERDADERO | FALSO" 	LOGICO
	'[a-z][a-zA-Z0-9_]*'	IDENTIFICADOR
	'\'([^\']|\'\')*\''		LETRAS								[* %match = %match.substr( 1, %match.length - 2 );
																   %match = %match.replace( /''/g, "\'" );		*]
	'([0-9]*\.)?[0-9]+'		NUMERO								[* $match = parseFloat(%match); *]
	;

##
Program:
		VarDecs FunctionDecs Inicio
		;
Inicio:	FINICIO '(' ')' Bloque
		;

Var:	VarDec '=' Exp ';' 										[* my_node.addVariable(%1, %3); *]
		| VarDec ';'											[* my_node.addVariable(%1); *]
		;
VarDec: Tipo IDENTIFICADOR										[* %% = new VARIABLE(%2, %1); *]
		;
VarDecs:
		VarDecs Var
		|
		;
ParamOpt:
		Param
		|
		;
Param:	Param ',' VarDec
		| VarDec
		;
ArgsOpt:
		Args
		|
		;
Args:	Args ',' Exp
		| Exp
		;

Function:
		FUNCION Tipo IDENTIFICADOR '(' ParamOpt ')' Bloque
		| FUNCION IDENTIFICADOR '(' ParamOpt ')' Bloque
		;
FunctionDecs:
		FunctionDecs Function
		|
		;

Bloque:
		'{' Statements '}'
		;

Statements:
		Statements Statement
		|
		;
Statement:
		Var
		| Control
		| Asignacion
		| Regreso
		| FunctionCall ';'
		| SpecialFunctions
		| ';'
		;
Asignacion:
		IDENTIFICADOR '=' Exp ';'
		;
Regreso:
		RESPONDER Exp ';'
		;
FunctionCall:
		IDENTIFICADOR '(' ArgsOpt ')'
		;
SpecialFunctions:
		DECIR '(' Exp ')' ';'
		;
Read:	ESCUCHAR '(' ')'
		| PREGUNTAR '(' Exp ')'
		;


Control:
		If
		| While
		| Foreach
		| Dowhile
		;
If:		SI '(' Exp ')' Bloque
		| SI '(' Exp ')' Bloque SINO Bloque
		| SI '(' Exp ')' Bloque SINO If
		;
While:	MIENTRAS '(' Exp ')' REPETIR Bloque
		;
Foreach:
		PORCADA IDENTIFICADOR EN IDENTIFICADOR Bloque
		;
Dowhile:
		HACER Bloque MIENTRAS '(' Exp ')' ';'
		;

Tipo: 	TLETRAS
		| TNUMERO
		| TLOGICO
		| TMATRIZ
		;
Matriz:	Matriz '[' Exp ']'
		| IDENTIFICADOR '[' Exp ']'
		;

Exp:	Exp OP_REL ExpSum
		| ExpSum
		;
ExpSum:	ExpSum '+' ExpMult
		| ExpSum '-' ExpMult
		| ExpSum '||' ExpMult
		| ExpMult
		;
ExpMult:
		ExpMult '*' ExpVal
		| ExpMult '/' ExpVal
		| ExpMult '&&' ExpVal
		| ExpVal
		;
ExpVal:	IDENTIFICADOR
		| NUMERO
		| LETRAS
		| LOGICO
		| Matriz
		| Read
		| PI
		| E
		| '(' Exp ')'
		| FunctionCall
		;

[*
if(process.argv.length > 2) {
	var file = process.argv[2];
	var fs = require('fs');
	fs.readFile(file, 'UTF-8', function(err, data) {
		if(err) {
			console.log("No se encontró el archivo!");
			return console.log(err);
		}
		var str = data;
		var error_cnt = 0;
		var error_off = new Array();
		var error_la = new Array();
		if((error_cnt = __##PREFIX##parse(str, error_off, error_la)) > 0) {
			for(var i = 0; i < error_cnt; i++ ) {
				console.log( "Parse error near >" + str.substr( error_off[i], 30 ) + "<, expecting \"" + error_la[i].join() + "\"" );
			}
		} else {
			console.log("Programa correcto!")
		}
	});
}
else {
	console.log( 'usage: tyrion <filename>' );
}
*]
