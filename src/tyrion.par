	/~
	 Definición para el lenguaje Tyrion
	~/


	/~
	 Funciones
	~/
	[*
	// Aqui pueden ir funciones de javascript

	*]
	/~
	 Tokens
	~/

	/~
	 Ignorar espacios en blanco y comentarios
	~/
	!	' |\t|\r|\n|//[^\n]*\n'

	/~
	 Tokens, no hay distinción entre mayusculas y minúsculas
	~/
		"SI"
		"SINO"
		"HACER"
		"MIENTRAS"
		"REPETIR"
		"PORCADA"
		"EN"
		"FUNCION INICIO"	FINICIO
		"FUNCION"
		"RESPONDER"
		"LEER"
		"PREGUNTAR"
		"HABLAR"
		"ESCUCHAR"
		"REGRESAR"
		"NUMERO"			TNUMERO
		"LETRAS"			TLETRAS
		"LOGICO"			TLOGICO
		"MATRIZ"			TMATRIZ
		"RAIZ"
		"VERDADERO"
		"FALSO"
		"PI"
		"E"
		'{'
		'}'
		'\['
		'\]'
		';'
		','
		'='
		'!'
		'=='
		'!='
		'<>'
		'<='
		'>='
		'>'
		'<'
		'\+'
		'\-'
		'/'
		'\*'
		'%'
		'\^'
		'\('
		'\)'
		'\|\|'
		'\&\&'


		'[a-z][a-zA-Z0-9_]*'	IDENTIFICADOR
		'\'([^\']|\'\')*\''		LETRAS								[* %match = %match.substr( 1, %match.length - 2 );
																	   %match = %match.replace( /''/g, "\'" );		*]
		'([0-9]*\.)?[0-9]+'		NUMERO
		;

	##

	Program: _var_star _funcion_star Inicio
			;

	Inicio: FINICIO '(' ')' Bloque
			;

	Var:	Var_dec _asign_opt ';'
			;
	_var_star:
			Var _var_star
			|
			;

	Var_dec:
			Tipo IDENTIFICADOR
			;
	_var_dec_coma_star:
			_var_dec_coma_star ',' _var_dec_coma_star
			Var_dec
			|
			;

	Funcion_dec:
			FUNCION _tipo_opt IDENTIFICADOR '(' _var_dec_coma_star ')' Bloque
			;
	_funcion_star:
			Funcion_dec _funcion_star
			|
			;

	If:		SI '(' Exp ')' Bloque _else_opt
			;

	Else:	SINO _else_1
			;
	_else_1:
			If
			| Bloque
			;
	_else_opt:
			Else
			|
			;

	Bloque:
			'{' _bloque_1_star '}'
			;
	_bloque_1:
			Var
			| Control
			| Asignacion
			| Regreso
			;
	_bloque_1_star:
			_bloque_1 _bloque_1_star
			|
			;

	Control:
			If
			| While
			| Foreach
			| Dowhile
			;
	Asignacion:
			IDENTIFICADOR '=' Exp ';'
			;
	_asign_opt:
			'=' Exp
			|
			;

	Regreso:
			RESPONDER Exp ';'
			;

	While:	MIENTRAS '(' Exp ')' Bloque
			;

	Foreach:
			PORCADA IDENTIFICADOR EN IDENTIFICADOR Bloque
			;

	Dowhile:
			HACER Bloque MIENTRAS '(' Exp ')' ';'
			;

	Tipo:	TLETRAS
			| TNUMERO
			| TLOGICO
			| TMATRIZ
			;
	_tipo_opt:
			Tipo
			|
			;

	Exp:	Exp_val
			;
	Exp_val:
			IDENTIFICADOR
			| NUMERO
			| LETRAS
			| PI
			| E
			| '(' Exp ')'
			| Matriz
			;

	Matriz:	IDENTIFICADOR _matriz_1
			;
	_matriz_1:
			'[' Exp ']' _matriz_1
			| '[' Exp ']'
			;

[*
var storageListener = function (e) {
    if (e.key == 'program-source') {
        saveInput(localStorage.getItem('program-source'));
    }
}
var saveInput = function(data) {
	var str = data;
	var error_cnt 	= 0;
	var error_off	= new Array();
	var error_la	= new Array();
	localStorage.removeItem('program-errors');
	if( ( error_cnt = __parse( str, error_off, error_la ) ) > 0 ) {
		for( i = 0; i < error_cnt; i++ )
			updateError( "Parse error near ->"
				+ str.substr( error_off[i], 30 ) + "<-, expecting \"" + error_la[i].join() + "\"" );
	} else {
		updateError('Programa correcto!!');
	}
}
var openNewWindow = function() {
	var myWindow = window.open('','','width=1100,height=850');
	var storageScript =  "<script>";
	storageScript += "var storageListener = function(e) {"
	storageScript += "if(e.key == 'program-errors') {";
	storageScript += "document.getElementById('myErrors').innerHTML = localStorage.getItem('program-errors') + '<br/>';"
	storageScript += "}\n}\n";
	storageScript += "window.addEventListener('storage',  storageListener, true);"
	storageScript += "</script>";
	var windowContent = "<div><textarea id='mySource' style='height:800px; width:500px; float:left'></textarea>";
	windowContent += "<div id='myErrors' style='height:800px; width:500px; float:left;'></div></div>";
	windowContent += "<input type='button' value='Save source' onclick=\"localStorage.setItem('program-source', document.getElementById('mySource').value)\" />";
	windowContent += "<input type='button' value='Reset' onclick=\"document.getElementById('mySource').value = ''; document.getElementById('myErrors').innerHTML = ''\" />";
	myWindow.document.write(windowContent);
	myWindow.document.write(storageScript);
	myWindow.focus();
}
var updateError = function(error) {
	localStorage.setItem('program-errors', error);
}
window.addEventListener("storage", storageListener, true);
openNewWindow();
*]